package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"

	"github.com/google/uuid"
	"github.com/jasurbekibnxusniddin/graphql-api-template-with-golang/gql/schema"
	"github.com/jasurbekibnxusniddin/graphql-api-template-with-golang/models"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input models.NewTodo) (*models.Todo, error) {

	newTodo := &models.Todo{
		ID:   uuid.NewString(),
		Text: input.Text,
	}

	todo, err := r.Storage.GetTodoRepo().CreateTodo(context.Background(), newTodo)
	if err != nil {
		return nil, err
	}

	return todo, nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input models.NewUser) (*models.User, error) {

	return nil, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*models.Todo, error) {
	
	todos, err := r.Storage.GetTodoRepo().GetTodo(ctx)
	if err != nil {
		return nil, err
	}

	return todos, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*models.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// Mutation returns schema.MutationResolver implementation.
func (r *resolver) Mutation() schema.MutationResolver { return &mutationResolver{r} }

// Query returns schema.QueryResolver implementation.
func (r *resolver) Query() schema.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *resolver }
type queryResolver struct{ *resolver }
